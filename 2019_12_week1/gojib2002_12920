#include <string>
#include <vector>

using namespace std;

//priority_queue를 이용해서 첫 시도 : 효율성 테스트 실패 (일의 수를 n, 코어 수를 m이라고 하면 mlogn인데?)
//priority_queue대신 set을 이용해서 두번째 시도 : 효율성 테스트 실패 (시간복잡도 마찬가지로 mlogn인데?)
//priority_queue에 pair대신 직접 구조체를 만들고 <에 대해 오버로딩 해서 시도 : 효율성 테스트 실패 (...)
//마지막 코어가 일을 시작하는 시간에 대해 parametric search 시도 : 통과. 시간복잡도는 e를 10억으로 잡아서 nlog(1000000000) -> 수치상 priority_queue보다 큰 시간복잡도.
//문제 시간제한이 ms단위로 엄청 빡세게 잡혀있고, stl의 priority_queue가 수치상 log지만 실제로는 그보다 조금 느린것 같다.
//아마 10ms 안쪽을 요구하는것 같은데 그럼 문제에 명시를 해야 제대로 풀지..

int solution(int n, vector<int> cores) {
    int answer = 0;
    int s, e;
    int mid;
    int arr[10000];
    int idx;
    int i;
    long long sum;
    
    s = 0;
    e = 1000000000;
    while(s<=e){
        mid = (s+e)/2;
        
        idx = 0;
        sum = 0;
        for(i=0;i<cores.size();i++){
            if(mid % cores[i] == 0) arr[idx++] = i + 1;
            
            sum += mid / cores[i] + (mid%cores[i] != 0);
        }

        if(sum >= n) e = mid - 1;
        else{
            if(sum + idx >= n) answer = arr[n - sum - 1];
            s = mid + 1;
        }
    }
    
    return answer;
}
