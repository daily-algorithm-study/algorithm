#include <string>
#include <vector>
#include <algorithm>

using namespace std;

 //dp[i][0] : i번째 건물까지 볼 때 i번째 건물을 선택 안할 경우 얻을 수 있는 금액.
 //i-1번째 건물까지 얻을 수 있는 최대 금액과 같으므로 dp[i-1][0]과 dp[i-1][1]중 큰 값.
 
 //dp[i][1] : i번째 건물까지 볼 때 i번째 건물을 선택할 경우 얻을 수 있는 금액.
 //i-2번째 건물까지 최대한 잘 모으고 i번째 건물을 훔치면 되므로 dp[i-2][0]과 dp[i-2][1]중 큰 값 + money[i]
 
 //주의할 점은 1번 건물과 n번 건물을 동시에 훔칠 수 없다는것.
 //1번 건물을 훔칠 수 있을 때 n-1번 건물까지만 훔치는 경우 얻을 수 있는 최댓값이 a
 //1번 건물을 훔치지 않고 n번 건물까지 훔칠 때 얻을 수 있는 최댓값이 b
 //정답은 max(a,b)

int dp[1000000][2];

int solution(vector<int> money) {
    int answer = 0;
    int i;
    
    dp[0][1] = money[0];
    dp[1][0] = money[0];
    dp[1][1] = max(money[0], money[1]);
    for(i=2;i<money.size() - 1;i++){
        dp[i][0] = max(dp[i-1][0], dp[i-1][1]);
        dp[i][1] = max(dp[i-2][0], dp[i-2][1]) + money[i];
    }
    
    answer = max(dp[money.size()-2][0], dp[money.size()-2][1]);
    
    dp[0][1] = 0;
    dp[1][0] = 0;
    dp[1][1] = money[1];
    for(i=2;i<money.size();i++){
        dp[i][0] = max(dp[i-1][0], dp[i-1][1]);
        dp[i][1] = max(dp[i-2][0], dp[i-2][1]) + money[i];
    }
    
    answer = max(answer, max(dp[money.size()-1][0], dp[money.size()-1][1]));
    
    return answer;
}
